Granskares namn: Arvid Persson Moosavi
Namn på den granskade: Fiktiv Fiktusson
Granskad uppgift: FiktivPupg.py


Användarvänlighet

_ Informativa utskrifter / lättbegripligt grafiskt gränssnitt
Informativa utskrifter, jag vet inte. Raderas verkligen hårddisken om man skriver in fel hemlig kod? :)
Utöver det var utskrifterna relativt bra. Går att lägga till att programmet är 'case sensitive' så användaren är noga med stora/små bokstäver när denne söker efter koder.

_ Enkel inmatning
Ja, det tycker jag. Smaksak men jag gillar att ange svar på ny rad, men fungerar att ange alternativ på samma rad.


Programmerarvänlighet

_ Vettiga namn
CodeBook-objektet kunde förslagsvis hetat 'codebook' istället för 'c', som definitivt känns som en lokal variabel.
Samma sak för öppnande av fil till variabeln 'f', varför inte bara döpa denna till 'file'?
Attributnamnen för objekten är bra.

_ Kommentarer
Alla metoder utom en är kommenterade men inga funktioner, varför inte? Även om det är självförklarande funktioner så underlättar det för användaren med en snabb kommentar på en rad. Loopen i klassen 'CodeBook' är inte kommenterad, vore också fint.

_ Konsekvent språk
Nej, här är det ganska blandat. Det börjar bra med klassnamnen och dess attribut som alla är på engelska. Även alla metoder är även de korrekt namngivna. Sen skiftar det till svenska i funktionerna och menyn, varför? Otydliga funktionsnamn som 'vaelj_alternativ' och 'slaaUpp'. Dessutom blandas språken i dessa funktioner i t.ex:

def laeggTill():
    namn=input("Vad gäller kod (textsträng)?")
    kod =int(input("Vad är koden (siffror)?"))
    kaad = Code(kod, namn)
    c.addCode(kaad)


_ Konsekvent typografi
Ja, funktionsnamnen 'slaaUpp' är en sammanslagning av 'slå' och 'upp'. Dock förstår jag inte variabeln 'huvudKod', är det verkligen en sammanskrivning av 'huvud' och 'kod'? Känns som det skulle vara 'huvudkod' kort och gott, eller varför inte 'masterCode'? Om det är en konstant genom programmet, vilket det är (går inte ändra huvudkoden) borde den betecknats som 'MASTERCODE'.

_ Felhantering
Inte så mycket felhantering i programmet. Till exempel om användaren söker på en kod som inte finns borde mer information än '0' ges som svar. Programmet kraschar när man lägger till en ny kod som bokstäver, dock är detta beskrivet som '(siffror)'. Programmet kraschar dock när man anger bokstäver som huvudkod, borde informeras om att en int ska anges.


Strukturering

_ Lämplig uppdelning i funktioner
Ja, dock saknas main! Gör programmet mer lättöverskådligt. Släng in allt i slutet av programmet i en main och anropa allra sist.

_ Lämplig uppdelning i klasser (ej obligatoriskt)
Ja, det tycker jag. En klass 'CodeBook' för att skapa kodboksobjekt med all data och en klass 'Code' för att skapa kodobjekten som sedan appendas till CodeBook-objektet (c).

_ Temporära variabler så lokalt som möjligt
Ja, i stort sett. Kontrollen som görs i början för huvudlösenordet hade kunnat läggas i en separat funktion som istället körs direkt i main, så slipper man en hel del kod som ligger löst.

_ Återanvändbara funktioner/klasser
Ja det tycker jag! Till exempel används klassen 'Code' både för att skapa nya Code-objekt till CodeBook, och när användaren lägger till en kod i funktionen laeggTill.

_ In- och utdata till funktioner
Ser bra ut.

_ Flexibelt/utbyggbart program
Ja, det skulle gå ganska enkelt att lägga till funktionalitet till programmet.

_ Ingen kodupprepning
Nej det tycker jag inte förekommer. Metoder och funktioner är väldefinierade

_ Ingen hårdkodning
Förekommer inte i funktioner eller metoder, vilket är jättebra. Dock förstår jag inte valet att definiera tre konstanter 'SLAA_UPP', 'LAEGG_TILL' och 'SLUTA', och sätta dessa till 1, 2, 3. Detta går lika bra och inga konstanter behövs:

val = 0
while val!=3:
    val=vaelj_alternativ()
    if val == 1:
        slaaUpp()
    elif val == 2:
        laeggTill()


Följande punkt är nödvändig (måste alltid åtgärdas)

_ Uppfyller kraven i lydelsen
